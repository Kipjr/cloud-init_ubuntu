---

- name: Add Docker official GPG key
  become: true
  ansible.builtin.apt_key:
    url: https://download.docker.com/linux/ubuntu/gpg
    state: present

- name: Add Docker repository
  become: true
  ansible.builtin.apt_repository:
    repo: "deb https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable"
    filename: docker
    state: present

- name: Ensure all packages are up to date
  become: true
  ansible.builtin.apt:
    update_cache: true

- name: Install Docker packages
  become: true
  ansible.builtin.apt:
    name:
      - docker-ce
      - docker-ce-cli
      - containerd.io
      - docker-buildx-plugin
      - docker-compose-plugin
      - docker-ce-rootless-extras
    state: present

- name: Check if Docker Rootless is installed
  ansible.builtin.stat:
    path: /run/user/{{ ansible_user_uid }}/docker.sock
  register: file_check_docker_rootless

- name: Disable Docker.service
  become: true
  ansible.builtin.systemd:
    name: docker.service
    masked: true
    enabled: false

- name: Disable Docker.socket
  become: true
  ansible.builtin.systemd:
    name: docker.socket
    masked: true
    enabled: false

- name: Remove docker.sock
  become: true
  ansible.builtin.file:
    path: /var/run/docker.sock
    state: absent

- name: Allow incoming access to eth0
  become: true
  community.general.ufw:
    rule: allow
    interface: eth0
    direction: in
    proto: tcp
    to_port: '{{ item }}'
  loop:
    - 80
    - 443
    - 9443

- name: Install Docker (rootless, using systemd)
  when: not file_check_docker_rootless.stat.exists
  become: true
  become_user: "{{ ansible_user_id }}"
  environment:
    XDG_RUNTIME_DIR: "/run/user/{{ ansible_user_uid }}"
    DBUS_SESSION_BUS_ADDRESS: "unix:path=/run/user/{{ ansible_user_uid }}/bus"
    HOME: "/home/{{ ansible_user_id }}"
  args:
    creates: "/home/{{ ansible_user_id }}/.docker/config.json"
  ansible.builtin.shell: |
    dockerd-rootless-setuptool.sh install

- name: Check if /usr/bin is in PATH in .bashrc
  ansible.builtin.command: grep -q 'export PATH=/usr/bin:$PATH' /home/{{ ansible_user_id }}/.bashrc
  register: bashrc_path_usr_bin_check
  ignore_errors: true
  changed_when: false

- name: Ensure /usr/bin is in PATH in .bashrc
  ansible.builtin.lineinfile:
    path: /home/{{ ansible_user_id }}/.bashrc
    line: 'export PATH=/usr/bin:$PATH'
    state: present
    create: true
    mode: "0644"
  when: bashrc_path_usr_bin_check.rc != 0

- name: Check if DOCKER_HOST is set in .bashrc
  ansible.builtin.command: grep -q 'export DOCKER_HOST=unix:///run/user/{{ ansible_user_uid }}/docker.sock' /home/{{ ansible_user_id }}/.bashrc
  register: bashrc_docker_host_check
  ignore_errors: true
  changed_when: false

- name: Ensure DOCKER_HOST is set in .bashrc
  ansible.builtin.lineinfile:
    path: /home/{{ ansible_user_id }}/.bashrc
    line: "export DOCKER_HOST=unix:///run/user/{{ ansible_user_uid }}/docker.sock"
    state: present
    create: true
    mode: "0644"
  when: bashrc_docker_host_check.rc != 0

- name: Check if lingering is enabled for the user
  ansible.builtin.command: loginctl show-user {{ ansible_user_id }} --property=Linger
  register: linger_status
  changed_when: false

- name: Enable lingering for the user
  ansible.builtin.command: loginctl enable-linger {{ ansible_user_id }}
  when: linger_status.stdout != 'Linger=yes'
  changed_when: linger_status.stdout != 'Linger=yes'

- name: Configure Docker Daemon.json
  become: true
  ansible.builtin.copy:
    dest: /etc/docker/daemon.json
    mode: "0644"
    content: |
      {
        "iptables": true,
        "bip": "10.249.0.1/24"
        "default-address-pools":[
          {"base":"10.249.1.0/24","size":28}
        ]
      }

- name: Ensure the user directory docker service exists
  ansible.builtin.file:
    path: /home/{{ ansible_user_id }}/.config/systemd/user/docker.service.d
    state: directory
    mode: "0755"

- name: Configure systemd override for user
  ansible.builtin.copy:
    dest: /home/{{ ansible_user_id }}/.config/systemd/user/docker.service.d/override.conf
    mode: "0644"
    content: |
      [Service]
      Environment="DOCKERD_ROOTLESS_ROOTLESSKIT_DISABLE_HOST_LOOPBACK=false"
      Environment="DOCKERD_ROOTLESS_ROOTLESSKIT_NET=slirp4netns --cidr=10.249.0.0/24"

- name: Ensure sysctl configurations for Docker are present in /etc/sysctl.d/docker.conf
  become: true
  ansible.builtin.lineinfile:
    path: /etc/sysctl.d/docker.conf
    line: "{{ item }}"
    create: true
    state: present
    mode: "0644"
  with_items:
    - "net.ipv4.ip_unprivileged_port_start=0"
    - "net.ipv4.ping_group_range=0 2147483647"

- name: Apply sysctl settings
  become: true
  changed_when: true
  ansible.builtin.shell: |
    sysctl --system
    exit 0

- name: Ensure the directory for Portainer exists
  when: ubtu22_portainer_agent
  ansible.builtin.file:
    path: /home/{{ ansible_user_id }}/docker/portainer
    mode: '0750'
    state: directory

- name: Configure Portainer with Docker Compose
  ansible.builtin.blockinfile:
    append_newline: true
    prepend_newline: true
    create: true
    path: /home/{{ ansible_user_id }}/docker/portainer/docker-compose.yml
    mode: "0640"
    owner: "{{ ansible_user_uid }}"
    group: "{{ ansible_user_gid }}"
    content: |
      volumes:
        data:
      
      services:
        agent:
          image: portainer/agent:latest
          container_name: agent
          restart: always
          security_opt:
            - no-new-privileges:true
          volumes:
            - /etc/localtime:/etc/localtime:ro
            - /run/user/{{ ansible_user_uid }}/docker.sock:/var/run/docker.sock
            - /home/{{ ansible_user_id }}/.local/share/docker/volumes:/var/lib/docker/volumes
          ports:
            - "9001:9001"
      
        portainer:
          image: portainer/portainer-ee:latest
          container_name: portainer
          restart: always
          security_opt:
            - no-new-privileges:true
          volumes:
            - /etc/localtime:/etc/localtime:ro
            - data:/data
          ports:
            - "9443:9443"

- name: Update Portainer EE
  when: not ubtu22_portainer_host
    path: /home/{{ ansible_user_id }}/docker/portainer/docker-compose.yml
    marker: "<!-- {mark} ANSIBLE MANAGED BLOCK -->"
    prepend_newline: true
    insertafter: "portainer:"
    block: |
      profiles:
        - host

- name: Update Portainer Agent
  when: not ubtu22_portainer_agent
  ansible.builtin.blockinfile:
    path: /home/{{ ansible_user_id }}/docker/portainer/docker-compose.yml
    marker: "<!-- {mark} ANSIBLE MANAGED BLOCK -->"
    prepend_newline: true
    insertafter: "agent:"
    block: |
      profiles:
        - agent

- name: Refresh env
  changed_when: true
  ansible.builtin.shell: |
    . /home/{{ ansible_user_id }}/.bashrc
    exit 0

- name: Run the Docker service
  ansible.builtin.systemd:
    name: docker
    enabled: true
    state: reloaded
    scope: user

- name: Start Docker Portainer
  when: ubtu22_portainer_agent
  community.docker.docker_compose_v2:
    docker_host: unix:///run/user/{{ ansible_user_uid }}/docker.sock
    project_src: /home/{{ ansible_user_id }}/docker/portainer
    state: present
