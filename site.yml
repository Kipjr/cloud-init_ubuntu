- name: Configure and setup the server
  hosts: localhost
  gather_facts: yes  # Ensure facts are gathered

  tasks:
    - name: Install roles and collections
      community.general.ansible_galaxy_install:
        type: both
        requirements_file: ./collections/requirements.yml
        
    - name: Set the machine FQDN
      become: yes
      hostname:
        name: "{{ ansible_fqdn }}"
        
    - name: Set timezone to Europe/Amsterdam
      become: yes
      timezone:
        name: Europe/Amsterdam
    
    - name: Ensure all packages are up to date
      become: yes
      apt:
        update_cache: yes
        upgrade: full

    - name: Install required packages
      become: yes
      apt:
        name:
          - ufw
          - ethtool
          - htop
          - lshw
          - screen
          - nano
          - net-tools
          - dnsutils
          - openssl
          - build-essential
          - p7zip-full
          - hw-probe
          - snmpd
          - snmp-mibs-downloader
          - curl
          - gnupg
          - apt-transport-https
          - ca-certificates
          - libssl-dev
          - software-properties-common
          - openssh-server
          - uidmap
          - dbus-user-session
          - docker-ce-rootless-extras
        state: present
        
    - name: Add Microsoft APT repository
      become: yes
      apt_repository:
        repo: "deb [arch=amd64] https://packages.microsoft.com/ubuntu/$(lsb_release -rs)/prod $(lsb_release -cs) main"
        state: present
    
    - name: Install PowerShell Core
      become: yes
      apt:
        name: powershell
        state: present

    - name: Generate SSH private key for user
      user:
        name: "{{ ansible_user_id }}"
        generate_ssh_key: yes
    
    - name: Add SSH public key to authorized_keys
      authorized_key:
        user: "{{ ansible_user_id }}"
        key: "{{ lookup('file', '/home/{{ ansible_user_id }}/.ssh/id_rsa.pub') }}"

    - name: Disable SSH password authentication
      become: yes
      lineinfile:
        path: /etc/ssh/sshd_config
        regexp: '^#?PasswordAuthentication'
        line: 'PasswordAuthentication no'
        state: present
    
    - name: Enable SSH key-based login
      become: yes
      lineinfile:
        path: /etc/ssh/sshd_config
        regexp: '^#?PubkeyAuthentication'
        line: 'PubkeyAuthentication yes'
        state: present
    
    - name: Restart SSH service
      become: yes
      service:
        name: ssh
        state: restarted
    
    - name: Add Docker official GPG key
      become: yes
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present

    - name: Add Docker repository
      become: yes
      apt_repository:
        repo: "deb [arch={{ ansible_architecture }}] https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable"
        filename: docker
        state: present

    - name: Install Docker packages
      become: yes
      apt:
        name:
          - docker-ce
          - docker-ce-cli
          - containerd.io
          - docker-buildx-plugin
          - docker-compose-plugin
        state: present

    - name: Install Docker (rootless)
      shell: |
        systemctl disable --now docker.service docker.socket
        rm /var/run/docker.sock
        dockerd-rootless-setuptool.sh install
        echo 'export PATH=/usr/bin:$PATH' >> /home/{{ ansible_user_id }}/.bashrc
        echo "export DOCKER_HOST=unix:///run/user/{{ ansible_uid }}/docker.sock" >> /home/{{ ansible_user_id }}/.bashrc
        systemctl --user start docker
        systemctl --user enable docker
        loginctl enable-linger {{ ansible_user_id }}

    - name: Setup unattended upgrades
      become: yes
      apt:
        name: unattended-upgrades
        state: present

    - name: Enable unattended upgrades
      become: yes
      shell: |
        dpkg-reconfigure --priority=low unattended-upgrades
        sed -i 's/\/\/\s*"\${distro_id}:\${distro_codename}-updates";/"\${distro_id}:\${distro_codename}-updates";/' /etc/apt/apt.conf.d/50unattended-upgrades

#    - name: Configure additional partition as xfs
#      filesystem:
#        fstype: xfs
#        dev: /dev/sdb1  # Replace with your actual partition

 #   - name: Mount the partition to /mnt/disk2
 #     mount:
 #       path: /mnt/disk2
 #       src: /dev/sdb1
 #       fstype: xfs
 #       state: mounted

#    - name: Symlink ~/.local/share/docker to /mnt/disk2/data/docker
#      file:
#        src: /mnt/disk2/data/docker
#        dest: /home/{{ ansible_user_id }}/.local/share/docker
#        state: link

    - name: Configure Webmin repository and install Webmin
      become: yes
      shell: |
        curl -o setup-repos.sh https://raw.githubusercontent.com/webmin/webmin/master/setup-repos.sh
        sh setup-repos.sh -f
        apt-get update
        apt-get install -y webmin --install-recommends

    - name: Configure Portainer with Docker Compose
      copy:
        dest: /home/{{ ansible_user_id }}/docker/portainer/docker-compose.yml
        content: |
          version: '3'
          services:
            portainer:
              image: portainer/portainer-ee:latest
              container_name: portainer
              restart: always
              security_opt:
                - no-new-privileges:true
              volumes:
                - /etc/localtime:/etc/localtime:ro
                - portainer_data:/data
              ports:
                - "9000:9000"

            portainer_agent:
              image: portainer/portainer-agent:latest
              container_name: portainer_agent
              restart: always
              security_opt:
                - no-new-privileges:true
              volumes:
                - /etc/localtime:/etc/localtime:ro
                - /run/user/{{ ansible_uid }}/docker.sock:/var/run/docker.sock
                - /home/{{ ansible_user_id }}/.local/share/docker/volumes:/var/lib/docker/volumes
              ports:
                - "9001:9001"
          volumes:
            portainer_data:
        owner: "{{ ansible_user_uid }}"
        group: "{{ ansible_user_gid }}"

- name: Apply CIS-remediation
  hosts: localhost
  become: yes
  roles:
    - role: UBUNTU22-CIS
      when:
        - ansible_os_family == 'UBUNTU'
        - ansible_distribution_major_version is version('22', '=')
